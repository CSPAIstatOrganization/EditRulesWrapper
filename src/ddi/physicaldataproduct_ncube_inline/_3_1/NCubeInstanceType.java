//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.physicaldataproduct_ncube_inline._3_1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.ReferenceType;
import ddi.reusable._3_1.VersionableType;


/**
 * A container for defining an instance of an NCube, which allows specifying the values of the attributes attached to a NCube.
 * 
 * <p>Java class for NCubeInstanceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NCubeInstanceType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:reusable:3_1}VersionableType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:physicaldataproduct_ncube_inline:3_1}NCubeReference"/>
 *         &lt;element ref="{ddi:physicaldataproduct_ncube_inline:3_1}Attribute" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:physicaldataproduct_ncube_inline:3_1}DataItem" maxOccurs="unbounded"/>
 *         &lt;element name="DefaultDataType" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="DefaultDelimiter" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="DefaultDecimalPositions" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}DefaultDecimalSeparator" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}DefaultDigitGroupSeparator" minOccurs="0"/>
 *         &lt;element name="NumberOfCases" type="{http://www.w3.org/2001/XMLSchema}integer" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NCubeInstanceType", propOrder = {
    "nCubeReference",
    "attribute",
    "dataItem",
    "defaultDataType",
    "defaultDelimiter",
    "defaultDecimalPositions",
    "defaultDecimalSeparator",
    "defaultDigitGroupSeparator",
    "numberOfCases"
})
public class NCubeInstanceType
    extends VersionableType
{

    @XmlElement(name = "NCubeReference", required = true)
    protected ReferenceType nCubeReference;
    @XmlElement(name = "Attribute")
    protected List<AttributeType> attribute;
    @XmlElement(name = "DataItem", required = true)
    protected List<DataItemType> dataItem;
    @XmlElement(name = "DefaultDataType")
    protected String defaultDataType;
    @XmlElement(name = "DefaultDelimiter")
    protected String defaultDelimiter;
    @XmlElement(name = "DefaultDecimalPositions")
    protected BigInteger defaultDecimalPositions;
    @XmlElement(name = "DefaultDecimalSeparator", namespace = "ddi:reusable:3_1")
    protected String defaultDecimalSeparator;
    @XmlElement(name = "DefaultDigitGroupSeparator", namespace = "ddi:reusable:3_1")
    protected String defaultDigitGroupSeparator;
    @XmlElement(name = "NumberOfCases")
    protected BigInteger numberOfCases;

    /**
     * Reference to the logical NCube description.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getNCubeReference() {
        return nCubeReference;
    }

    /**
     * Sets the value of the nCubeReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setNCubeReference(ReferenceType value) {
        this.nCubeReference = value;
    }

    /**
     * This is an attribute attached to the NCube as a whole or a region of the NCube as defined in the logical description. The content of the attribute can be provided as a single value or reference a location in the data store where the attribute value will be found.Gets the value of the attribute property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the attribute property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAttribute().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AttributeType }
     * 
     * 
     */
    public List<AttributeType> getAttribute() {
        if (attribute == null) {
            attribute = new ArrayList<AttributeType>();
        }
        return this.attribute;
    }

    /**
     * Identifies a physical storage location for an individual data entry, serving as a link between the physical location and the logical content description of each data item.  Note that only one data item is described here, since the structure describes all data and meta data for the NCube.  That is to day that in this desciption, each row of data in the referenced file corresponds to the same NCube of data.Gets the value of the dataItem property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataItem property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataItem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DataItemType }
     * 
     * 
     */
    public List<DataItemType> getDataItem() {
        if (dataItem == null) {
            dataItem = new ArrayList<DataItemType>();
        }
        return this.dataItem;
    }

    /**
     * Gets the value of the defaultDataType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultDataType() {
        return defaultDataType;
    }

    /**
     * Sets the value of the defaultDataType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultDataType(String value) {
        this.defaultDataType = value;
    }

    /**
     * Gets the value of the defaultDelimiter property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultDelimiter() {
        return defaultDelimiter;
    }

    /**
     * Sets the value of the defaultDelimiter property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultDelimiter(String value) {
        this.defaultDelimiter = value;
    }

    /**
     * Gets the value of the defaultDecimalPositions property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDefaultDecimalPositions() {
        return defaultDecimalPositions;
    }

    /**
     * Sets the value of the defaultDecimalPositions property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDefaultDecimalPositions(BigInteger value) {
        this.defaultDecimalPositions = value;
    }

    /**
     * The character used to separate the integer and the fraction part of a number (if an explicit separator is used in the data) that is applied to the majority of the dataitems reducing the amount of repetitive markup required. It can be overridden at the dataitem level. Allowed values are: None (default), Dot, Comma, Other. On the basis of the data definition in DDI documents, data processing tools could compute the necessary precision width on the basis of the format width and the existence of separators. Appropriate data types could be used, i.e. float or double, short or long. The decimal separator definition only makes sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultDecimalSeparator() {
        return defaultDecimalSeparator;
    }

    /**
     * Sets the value of the defaultDecimalSeparator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultDecimalSeparator(String value) {
        this.defaultDecimalSeparator = value;
    }

    /**
     * The character used to separate groups of digits (if an explicit separator is used in the data) that is applied to the majority of the dataitems reducing the amount of repetitive markup required. It can be overridden at the dataitem level. Allowed values are: None (default), Dot, Comma, Other. The decimal separator definition makes only sense with some XML Schema primitives. This is a default which may be overridden in specific cases.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultDigitGroupSeparator() {
        return defaultDigitGroupSeparator;
    }

    /**
     * Sets the value of the defaultDigitGroupSeparator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultDigitGroupSeparator(String value) {
        this.defaultDigitGroupSeparator = value;
    }

    /**
     * Gets the value of the numberOfCases property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getNumberOfCases() {
        return numberOfCases;
    }

    /**
     * Sets the value of the numberOfCases property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setNumberOfCases(BigInteger value) {
        this.numberOfCases = value;
    }

}
