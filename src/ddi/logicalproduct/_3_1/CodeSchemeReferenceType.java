//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.logicalproduct._3_1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Describes a coded representation.
 * 
 * <p>Java class for CodeSchemeReferenceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CodeSchemeReferenceType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:reusable:3_1}ReferenceType">
 *       &lt;sequence>
 *         &lt;group ref="{ddi:logicalproduct:3_1}CodeSubsetInfo"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CodeSchemeReferenceType", propOrder = {
    "includedLevel",
    "includedCodeReference",
    "dataExistence",
    "variableConcatenation"
})
public class CodeSchemeReferenceType
    extends ReferenceType
{

    @XmlElement(name = "IncludedLevel")
    protected List<BigInteger> includedLevel;
    @XmlElement(name = "IncludedCodeReference")
    protected List<IncludedCodeReferenceType> includedCodeReference;
    @XmlElement(name = "DataExistence")
    protected DataExistenceType dataExistence;
    @XmlElement(name = "VariableConcatenation")
    protected VariableConcatenationType variableConcatenation;

    /**
     * Gets the value of the includedLevel property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the includedLevel property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIncludedLevel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BigInteger }
     * 
     * 
     */
    public List<BigInteger> getIncludedLevel() {
        if (includedLevel == null) {
            includedLevel = new ArrayList<BigInteger>();
        }
        return this.includedLevel;
    }

    /**
     * Allows selection of code schemes to use not based on levels.Gets the value of the includedCodeReference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the includedCodeReference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIncludedCodeReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link IncludedCodeReferenceType }
     * 
     * 
     */
    public List<IncludedCodeReferenceType> getIncludedCodeReference() {
        if (includedCodeReference == null) {
            includedCodeReference = new ArrayList<IncludedCodeReferenceType>();
        }
        return this.includedCodeReference;
    }

    /**
     * Allows for inclusion of upper level categories that will not have associated data. In this case they act as the DDI version 2 form of category group.
     * 
     * @return
     *     possible object is
     *     {@link DataExistenceType }
     *     
     */
    public DataExistenceType getDataExistence() {
        return dataExistence;
    }

    /**
     * Sets the value of the dataExistence property.
     * 
     * @param value
     *     allowed object is
     *     {@link DataExistenceType }
     *     
     */
    public void setDataExistence(DataExistenceType value) {
        this.dataExistence = value;
    }

    /**
     * Describes the concatenation of other variables, based on a category value of this variable that can be used to identify or locate a specific record of this type. Used to identify unique identification string for a record of a specific category type. For example: A summary level indicating a state record may only require a STATE code to identify it in addition to its summary level category value, while a COUNTY would require a specific summary level value plus a STATE code and a COUNTY code.
     * 
     * @return
     *     possible object is
     *     {@link VariableConcatenationType }
     *     
     */
    public VariableConcatenationType getVariableConcatenation() {
        return variableConcatenation;
    }

    /**
     * Sets the value of the variableConcatenation property.
     * 
     * @param value
     *     allowed object is
     *     {@link VariableConcatenationType }
     *     
     */
    public void setVariableConcatenation(VariableConcatenationType value) {
        this.variableConcatenation = value;
    }

}
