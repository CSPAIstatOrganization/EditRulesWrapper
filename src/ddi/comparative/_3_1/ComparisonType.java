//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.comparative._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.LabelType;
import ddi.reusable._3_1.MaintainableType;
import ddi.reusable._3_1.NameType;
import ddi.reusable._3_1.NoteType;
import ddi.reusable._3_1.StructuredStringType;


/**
 * Structures information that is necessary to compare members of a group. Contains the mapping(s) That inform comparisons and facilitate automation. Note that all maps are pairwise, identifying two schemes and the correlation between two items in those schemes. By using a set of pairwise comparisons, it is possible to describe more complex correspondences - pairwise comparisons are easier to process.
 * 
 * <p>Java class for ComparisonType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ComparisonType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:reusable:3_1}MaintainableType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:comparative:3_1}ComparisonName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}Label" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}Description" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}ConceptMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}VariableMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}QuestionMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}CategoryMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}CodeMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:comparative:3_1}UniverseMap" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}Note" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ComparisonType", propOrder = {
    "comparisonName",
    "label",
    "description",
    "conceptMap",
    "variableMap",
    "questionMap",
    "categoryMap",
    "codeMap",
    "universeMap",
    "note"
})
public class ComparisonType
    extends MaintainableType
{

    @XmlElement(name = "ComparisonName")
    protected List<NameType> comparisonName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_1")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_1")
    protected List<StructuredStringType> description;
    @XmlElement(name = "ConceptMap")
    protected List<GenericMapType> conceptMap;
    @XmlElement(name = "VariableMap")
    protected List<GenericMapType> variableMap;
    @XmlElement(name = "QuestionMap")
    protected List<GenericMapType> questionMap;
    @XmlElement(name = "CategoryMap")
    protected List<GenericMapType> categoryMap;
    @XmlElement(name = "CodeMap")
    protected List<CodeMapType> codeMap;
    @XmlElement(name = "UniverseMap")
    protected List<GenericMapType> universeMap;
    @XmlElement(name = "Note", namespace = "ddi:reusable:3_1")
    protected List<NoteType> note;

    /**
     * Gets the value of the comparisonName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the comparisonName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getComparisonName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     * 
     * 
     */
    public List<NameType> getComparisonName() {
        if (comparisonName == null) {
            comparisonName = new ArrayList<NameType>();
        }
        return this.comparisonName;
    }

    /**
     * Gets the value of the label property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     * 
     * 
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * Description of the comparison, intended to be human-readable.Gets the value of the description property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the description property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StructuredStringType }
     * 
     * 
     */
    public List<StructuredStringType> getDescription() {
        if (description == null) {
            description = new ArrayList<StructuredStringType>();
        }
        return this.description;
    }

    /**
     * Maps comparable concepts from two different concept schemes.Gets the value of the conceptMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conceptMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConceptMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * 
     * 
     */
    public List<GenericMapType> getConceptMap() {
        if (conceptMap == null) {
            conceptMap = new ArrayList<GenericMapType>();
        }
        return this.conceptMap;
    }

    /**
     * Maps comparable variables from two different variable schemes.Gets the value of the variableMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the variableMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVariableMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * 
     * 
     */
    public List<GenericMapType> getVariableMap() {
        if (variableMap == null) {
            variableMap = new ArrayList<GenericMapType>();
        }
        return this.variableMap;
    }

    /**
     * Maps comparable questions from two different question schemes.Gets the value of the questionMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the questionMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuestionMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * 
     * 
     */
    public List<GenericMapType> getQuestionMap() {
        if (questionMap == null) {
            questionMap = new ArrayList<GenericMapType>();
        }
        return this.questionMap;
    }

    /**
     * Maps comparable categories from two different category schemes.Gets the value of the categoryMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the categoryMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCategoryMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * 
     * 
     */
    public List<GenericMapType> getCategoryMap() {
        if (categoryMap == null) {
            categoryMap = new ArrayList<GenericMapType>();
        }
        return this.categoryMap;
    }

    /**
     * Maps comparable codes from two different code schemes.Gets the value of the codeMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codeMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodeMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeMapType }
     * 
     * 
     */
    public List<CodeMapType> getCodeMap() {
        if (codeMap == null) {
            codeMap = new ArrayList<CodeMapType>();
        }
        return this.codeMap;
    }

    /**
     * Maps comparable universes from two different universe schemes.Gets the value of the universeMap property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the universeMap property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUniverseMap().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GenericMapType }
     * 
     * 
     */
    public List<GenericMapType> getUniverseMap() {
        if (universeMap == null) {
            universeMap = new ArrayList<GenericMapType>();
        }
        return this.universeMap;
    }

    /**
     * Notes regarding any information in the module.Gets the value of the note property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the note property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNote().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NoteType }
     * 
     * 
     */
    public List<NoteType> getNote() {
        if (note == null) {
            note = new ArrayList<NoteType>();
        }
        return this.note;
    }

}
