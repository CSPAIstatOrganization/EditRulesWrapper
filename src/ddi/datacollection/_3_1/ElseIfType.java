//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CodeType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Use for multiple branching from a single point in the flow logic represpented by the flow logic If, Then, ElseIf, Then, etc.
 * 
 * <p>Java class for ElseIfType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ElseIfType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}IfCondition"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ThenConstructReference"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ElseIfType", propOrder = {
    "ifCondition",
    "thenConstructReference"
})
public class ElseIfType {

    @XmlElement(name = "IfCondition", required = true)
    protected CodeType ifCondition;
    @XmlElement(name = "ThenConstructReference", required = true)
    protected ReferenceType thenConstructReference;

    /**
     * The condition which must be met to trigger the Then clause, expressed as a Coding. The condition is an expression in the programming language used in the instrument.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getIfCondition() {
        return ifCondition;
    }

    /**
     * Sets the value of the ifCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setIfCondition(CodeType value) {
        this.ifCondition = value;
    }

    /**
     * Reference to the control construct which should be triggered if the associated condition is met.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getThenConstructReference() {
        return thenConstructReference;
    }

    /**
     * Sets the value of the thenConstructReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setThenConstructReference(ReferenceType value) {
        this.thenConstructReference = value;
    }

}
