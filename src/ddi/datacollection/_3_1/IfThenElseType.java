//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CodeType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Provides an if-then-else construct, so that if the stated condition is met, the Then clause is triggered, and otherwise the Else clause is triggered.
 * 
 * <p>Java class for IfThenElseType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IfThenElseType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:datacollection:3_1}ControlConstructType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}IfCondition"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ThenConstructReference"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ElseIf" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ElseConstructReference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IfThenElseType", propOrder = {
    "ifCondition",
    "thenConstructReference",
    "elseIf",
    "elseConstructReference"
})
public class IfThenElseType
    extends ControlConstructType
{

    @XmlElement(name = "IfCondition", required = true)
    protected CodeType ifCondition;
    @XmlElement(name = "ThenConstructReference", required = true)
    protected ReferenceType thenConstructReference;
    @XmlElement(name = "ElseIf")
    protected List<ElseIfType> elseIf;
    @XmlElement(name = "ElseConstructReference")
    protected ReferenceType elseConstructReference;

    /**
     * The condition which must be met to trigger the Then clause, expressed as a Coding. The condition is an expression in the programming language used in the instrument.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getIfCondition() {
        return ifCondition;
    }

    /**
     * Sets the value of the ifCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setIfCondition(CodeType value) {
        this.ifCondition = value;
    }

    /**
     * Reference to the control construct which should be triggered if the associated condition is met.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getThenConstructReference() {
        return thenConstructReference;
    }

    /**
     * Sets the value of the thenConstructReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setThenConstructReference(ReferenceType value) {
        this.thenConstructReference = value;
    }

    /**
     * Use for multiple branching from a single point in the flow logic represpented by the flow logic If, Then, ElseIf, Then, etc.Gets the value of the elseIf property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the elseIf property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getElseIf().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ElseIfType }
     * 
     * 
     */
    public List<ElseIfType> getElseIf() {
        if (elseIf == null) {
            elseIf = new ArrayList<ElseIfType>();
        }
        return this.elseIf;
    }

    /**
     * Reference to the control construct which is triggered if the associated condition is not met.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getElseConstructReference() {
        return elseConstructReference;
    }

    /**
     * Sets the value of the elseConstructReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setElseConstructReference(ReferenceType value) {
        this.elseConstructReference = value;
    }

}
