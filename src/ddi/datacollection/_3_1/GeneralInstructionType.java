//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CommandType;
import ddi.reusable._3_1.ReferenceType;
import ddi.reusable._3_1.StructuredStringType;


/**
 * Coding instructions that pertain to data collection or data processing overall such as handling of non-response to questions, imputation practices, suppression rules, etc. Coding instructions should be listed separately to allow for referencing of specific processes.
 * 
 * <p>Java class for GeneralInstructionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GeneralInstructionType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:reusable:3_1}Description" maxOccurs="unbounded"/>
 *         &lt;element ref="{ddi:reusable:3_1}Command" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}IsOverride" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="isOverride" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GeneralInstructionType", propOrder = {
    "description",
    "command",
    "isOverride"
})
public class GeneralInstructionType {

    @XmlElement(name = "Description", namespace = "ddi:reusable:3_1", required = true)
    protected List<StructuredStringType> description;
    @XmlElement(name = "Command", namespace = "ddi:reusable:3_1")
    protected List<CommandType> command;
    @XmlElement(name = "IsOverride")
    protected ReferenceType isOverride;
    @XmlAttribute(name = "isOverride")
    protected Boolean isOverrideAttribute;

    /**
     * A human-readable description of the coding instruction.Gets the value of the description property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the description property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StructuredStringType }
     * 
     * 
     */
    public List<StructuredStringType> getDescription() {
        if (description == null) {
            description = new ArrayList<StructuredStringType>();
        }
        return this.description;
    }

    /**
     * A machine-actionable command for processing the coding process.Gets the value of the command property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the command property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCommand().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CommandType }
     * 
     * 
     */
    public List<CommandType> getCommand() {
        if (command == null) {
            command = new ArrayList<CommandType>();
        }
        return this.command;
    }

    /**
     * Used when attribute of the containing GeneralInstruction isOverride equals true. This element provides the reference to the Coding Element containing the GeneralInstruction that is being overriden.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getIsOverride() {
        return isOverride;
    }

    /**
     * Sets the value of the isOverride property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setIsOverride(ReferenceType value) {
        this.isOverride = value;
    }

    /**
     * Gets the value of the isOverrideAttribute property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isIsOverrideAttribute() {
        if (isOverrideAttribute == null) {
            return false;
        } else {
            return isOverrideAttribute;
        }
    }

    /**
     * Sets the value of the isOverrideAttribute property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsOverrideAttribute(Boolean value) {
        this.isOverrideAttribute = value;
    }

}
