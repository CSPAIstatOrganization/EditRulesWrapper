//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CodeType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Structures a control construct which repeats while a specified condition is met. Before each iteration the condition is tested. When the condition is not met, control passes back to the containing control construct.
 * 
 * <p>Java class for RepeatWhileType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RepeatWhileType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:datacollection:3_1}ControlConstructType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}WhileCondition"/>
 *         &lt;element ref="{ddi:datacollection:3_1}WhileConstructReference"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepeatWhileType", propOrder = {
    "whileCondition",
    "whileConstructReference"
})
public class RepeatWhileType
    extends ControlConstructType
{

    @XmlElement(name = "WhileCondition", required = true)
    protected CodeType whileCondition;
    @XmlElement(name = "WhileConstructReference", required = true)
    protected ReferenceType whileConstructReference;

    /**
     * The condition which must be met to trigger the operation of the associated Coding.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getWhileCondition() {
        return whileCondition;
    }

    /**
     * Sets the value of the whileCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setWhileCondition(CodeType value) {
        this.whileCondition = value;
    }

    /**
     * Reference to the Coding which is to be run when the associated condition has been met.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getWhileConstructReference() {
        return whileConstructReference;
    }

    /**
     * Sets the value of the whileConstructReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setWhileConstructReference(ReferenceType value) {
        this.whileConstructReference = value;
    }

}
