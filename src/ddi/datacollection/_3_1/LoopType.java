//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CodeType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Structures a control construct which loops until a limiting condition is met. The ControlConstruct contained in the Loop operates on the LoopVariable until the LoopWhile condition is met, and then control is handed back to the containing control construct.
 * 
 * <p>Java class for LoopType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LoopType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:datacollection:3_1}ControlConstructType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}LoopVariableReference" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}InitialValue" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}LoopWhile"/>
 *         &lt;element ref="{ddi:datacollection:3_1}StepValue" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ControlConstructReference" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LoopType", propOrder = {
    "loopVariableReference",
    "initialValue",
    "loopWhile",
    "stepValue",
    "controlConstructReference"
})
public class LoopType
    extends ControlConstructType
{

    @XmlElement(name = "LoopVariableReference")
    protected ReferenceType loopVariableReference;
    @XmlElement(name = "InitialValue")
    protected CodeType initialValue;
    @XmlElement(name = "LoopWhile", required = true)
    protected CodeType loopWhile;
    @XmlElement(name = "StepValue")
    protected CodeType stepValue;
    @XmlElement(name = "ControlConstructReference")
    protected List<ReferenceType> controlConstructReference;

    /**
     * A reference to the variable (as used in the associated Codings) which is incremented or otherwise manipulated to meet the conditions stated in the LoopWhile condition.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getLoopVariableReference() {
        return loopVariableReference;
    }

    /**
     * Sets the value of the loopVariableReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setLoopVariableReference(ReferenceType value) {
        this.loopVariableReference = value;
    }

    /**
     * The initial value to which the LoopVariable is set.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getInitialValue() {
        return initialValue;
    }

    /**
     * Sets the value of the initialValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setInitialValue(CodeType value) {
        this.initialValue = value;
    }

    /**
     * The condition which must be met for the Loop's functioning to cease; when this condition is met, control is handed back to the containing control construct.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getLoopWhile() {
        return loopWhile;
    }

    /**
     * Sets the value of the loopWhile property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setLoopWhile(CodeType value) {
        this.loopWhile = value;
    }

    /**
     * A Coding which is used to manipulate the LoopVariable after each iteration of the Loop's associated ControlConstruct element.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getStepValue() {
        return stepValue;
    }

    /**
     * Sets the value of the stepValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setStepValue(CodeType value) {
        this.stepValue = value;
    }

    /**
     * Gets the value of the controlConstructReference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the controlConstructReference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getControlConstructReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     * 
     * 
     */
    public List<ReferenceType> getControlConstructReference() {
        if (controlConstructReference == null) {
            controlConstructReference = new ArrayList<ReferenceType>();
        }
        return this.controlConstructReference;
    }

}
