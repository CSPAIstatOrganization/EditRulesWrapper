//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.NameType;
import ddi.reusable._3_1.OtherMaterialType;
import ddi.reusable._3_1.ReferenceType;
import ddi.reusable._3_1.RepresentationType;
import ddi.reusable._3_1.StructuredStringType;
import ddi.reusable._3_1.TextDomainType;
import ddi.reusable._3_1.VersionableType;


/**
 * Structures the QuestionItem, and provides a structure inherited by other derived question item types.
 * 
 * <p>Java class for QuestionItemType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="QuestionItemType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:reusable:3_1}VersionableType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}QuestionItemName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}QuestionText" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}QuestionIntent" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;choice>
 *           &lt;element ref="{ddi:datacollection:3_1}ResponseDomain"/>
 *           &lt;element ref="{ddi:datacollection:3_1}StructuredMixedResponseDomain"/>
 *         &lt;/choice>
 *         &lt;element ref="{ddi:datacollection:3_1}ConceptReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:datacollection:3_1}ExternalAid" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "QuestionItemType", propOrder = {
    "questionItemName",
    "questionText",
    "questionIntent",
    "responseDomain",
    "structuredMixedResponseDomain",
    "conceptReference",
    "externalAid"
})
public class QuestionItemType
    extends VersionableType
{

    @XmlElement(name = "QuestionItemName")
    protected List<NameType> questionItemName;
    @XmlElement(name = "QuestionText")
    protected List<DynamicTextType> questionText;
    @XmlElement(name = "QuestionIntent")
    protected List<StructuredStringType> questionIntent;
    @XmlElementRef(name = "ResponseDomain", namespace = "ddi:datacollection:3_1", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends RepresentationType> responseDomain;
    @XmlElement(name = "StructuredMixedResponseDomain")
    protected StructuredMixedResponseDomainType structuredMixedResponseDomain;
    @XmlElement(name = "ConceptReference")
    protected List<ReferenceType> conceptReference;
    @XmlElement(name = "ExternalAid")
    protected List<OtherMaterialType> externalAid;

    /**
     * Gets the value of the questionItemName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the questionItemName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuestionItemName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     * 
     * 
     */
    public List<NameType> getQuestionItemName() {
        if (questionItemName == null) {
            questionItemName = new ArrayList<NameType>();
        }
        return this.questionItemName;
    }

    /**
     * The text of the question presented in the instrument. this can occur multiple times for multi lingual questions.Gets the value of the questionText property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the questionText property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuestionText().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DynamicTextType }
     * 
     * 
     */
    public List<DynamicTextType> getQuestionText() {
        if (questionText == null) {
            questionText = new ArrayList<DynamicTextType>();
        }
        return this.questionText;
    }

    /**
     * The purpose of the question vis-a-vis the data being collected.Gets the value of the questionIntent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the questionIntent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuestionIntent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StructuredStringType }
     * 
     * 
     */
    public List<StructuredStringType> getQuestionIntent() {
        if (questionIntent == null) {
            questionIntent = new ArrayList<StructuredStringType>();
        }
        return this.questionIntent;
    }

    /**
     * Contains a response domain for the question. Typically used to describe simple response domains (textual, numeric, etc.)
     * 
     * @return
     *     possible object is
     *     {@link JAXBElement }{@code <}{@link RepresentationType }{@code >}
     *     {@link JAXBElement }{@code <}{@link CodeDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link NumericDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link DateTimeDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link CategoryDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link TextDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link GeographicDomainType }{@code >}
     *     
     */
    public JAXBElement<? extends RepresentationType> getResponseDomain() {
        return responseDomain;
    }

    /**
     * Sets the value of the responseDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link JAXBElement }{@code <}{@link RepresentationType }{@code >}
     *     {@link JAXBElement }{@code <}{@link CodeDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link NumericDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link DateTimeDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link CategoryDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link TextDomainType }{@code >}
     *     {@link JAXBElement }{@code <}{@link GeographicDomainType }{@code >}
     *     
     */
    public void setResponseDomain(JAXBElement<? extends RepresentationType> value) {
        this.responseDomain = value;
    }

    /**
     * Contains a response domain for the question. Typically used to describe simple response domains (textual, numeric, etc.)
     * 
     * @return
     *     possible object is
     *     {@link StructuredMixedResponseDomainType }
     *     
     */
    public StructuredMixedResponseDomainType getStructuredMixedResponseDomain() {
        return structuredMixedResponseDomain;
    }

    /**
     * Sets the value of the structuredMixedResponseDomain property.
     * 
     * @param value
     *     allowed object is
     *     {@link StructuredMixedResponseDomainType }
     *     
     */
    public void setStructuredMixedResponseDomain(StructuredMixedResponseDomainType value) {
        this.structuredMixedResponseDomain = value;
    }

    /**
     * A reference to the concept associated with the response to the question.Gets the value of the conceptReference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the conceptReference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConceptReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReferenceType }
     * 
     * 
     */
    public List<ReferenceType> getConceptReference() {
        if (conceptReference == null) {
            conceptReference = new ArrayList<ReferenceType>();
        }
        return this.conceptReference;
    }

    /**
     * A pointer to an exteral aid presented by the instrument such as a text card, image, audio, or audiovisual aid. Typically a URN. Use type attribute to describe the type of external aid provided. Example of terms to use would include: imageOnly audioOnly audioVisual multiMedia.Gets the value of the externalAid property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the externalAid property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExternalAid().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OtherMaterialType }
     * 
     * 
     */
    public List<OtherMaterialType> getExternalAid() {
        if (externalAid == null) {
            externalAid = new ArrayList<OtherMaterialType>();
        }
        return this.externalAid;
    }

}
