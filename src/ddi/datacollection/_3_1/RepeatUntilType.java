//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.datacollection._3_1;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.CodeType;
import ddi.reusable._3_1.ReferenceType;


/**
 * Structures the control construct which allows a Coding to be repeated until a specified condition is met.
 * 
 * <p>Java class for RepeatUntilType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RepeatUntilType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:datacollection:3_1}ControlConstructType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:datacollection:3_1}UntilCondition"/>
 *         &lt;element ref="{ddi:datacollection:3_1}UntilConstructReference"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RepeatUntilType", propOrder = {
    "untilCondition",
    "untilConstructReference"
})
public class RepeatUntilType
    extends ControlConstructType
{

    @XmlElement(name = "UntilCondition", required = true)
    protected CodeType untilCondition;
    @XmlElement(name = "UntilConstructReference", required = true)
    protected ReferenceType untilConstructReference;

    /**
     * The condition which must be met to stop the repeated operation of the Coding in the associated UntilConstruct. The condition is an expression in the programming language used in the instrument.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getUntilCondition() {
        return untilCondition;
    }

    /**
     * Sets the value of the untilCondition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setUntilCondition(CodeType value) {
        this.untilCondition = value;
    }

    /**
     * Reference to the Coding which runs until the UntilCondition is met. When the operation ceases, the flow returns to the containing control construct.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getUntilConstructReference() {
        return untilConstructReference;
    }

    /**
     * Sets the value of the untilConstructReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setUntilConstructReference(ReferenceType value) {
        this.untilConstructReference = value;
    }

}
