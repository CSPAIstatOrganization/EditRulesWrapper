//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.08.22 at 02:00:24 PM CEST 
//


package ddi.conceptualcomponent._3_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import ddi.reusable._3_1.LabelType;
import ddi.reusable._3_1.NameType;
import ddi.reusable._3_1.ReferenceType;
import ddi.reusable._3_1.StructuredStringType;
import ddi.reusable._3_1.VersionableType;


/**
 * Container for a data element concept (per ISO/IEC 11179) included in the concept scheme.
 * 
 * <p>Java class for DataElementConceptType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DataElementConceptType">
 *   &lt;complexContent>
 *     &lt;extension base="{ddi:reusable:3_1}VersionableType">
 *       &lt;sequence>
 *         &lt;element ref="{ddi:conceptualcomponent:3_1}DataElementConceptName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}Label" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:reusable:3_1}Description" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:conceptualcomponent:3_1}SimilarConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{ddi:conceptualcomponent:3_1}CharacteristicReference"/>
 *         &lt;element ref="{ddi:reusable:3_1}UniverseReference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DataElementConceptType", propOrder = {
    "dataElementConceptName",
    "label",
    "description",
    "similarConcept",
    "characteristicReference",
    "universeReference"
})
public class DataElementConceptType
    extends VersionableType
{

    @XmlElement(name = "DataElementConceptName")
    protected List<NameType> dataElementConceptName;
    @XmlElement(name = "Label", namespace = "ddi:reusable:3_1")
    protected List<LabelType> label;
    @XmlElement(name = "Description", namespace = "ddi:reusable:3_1")
    protected List<StructuredStringType> description;
    @XmlElement(name = "SimilarConcept")
    protected List<SimilarConceptType> similarConcept;
    @XmlElement(name = "CharacteristicReference", required = true)
    protected ConceptReferenceType characteristicReference;
    @XmlElement(name = "UniverseReference", namespace = "ddi:reusable:3_1")
    protected ReferenceType universeReference;

    /**
     * Gets the value of the dataElementConceptName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dataElementConceptName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDataElementConceptName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NameType }
     * 
     * 
     */
    public List<NameType> getDataElementConceptName() {
        if (dataElementConceptName == null) {
            dataElementConceptName = new ArrayList<NameType>();
        }
        return this.dataElementConceptName;
    }

    /**
     * A display label for the concept.Gets the value of the label property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the label property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLabel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LabelType }
     * 
     * 
     */
    public List<LabelType> getLabel() {
        if (label == null) {
            label = new ArrayList<LabelType>();
        }
        return this.label;
    }

    /**
     * Includes the definition of the concept itself. This element can be repeated to provide translations of the same concept in various languages.Gets the value of the description property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the description property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StructuredStringType }
     * 
     * 
     */
    public List<StructuredStringType> getDescription() {
        if (description == null) {
            description = new ArrayList<StructuredStringType>();
        }
        return this.description;
    }

    /**
     * Reference to another concept that is similar to the one included in the Description element above.Gets the value of the similarConcept property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the similarConcept property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSimilarConcept().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SimilarConceptType }
     * 
     * 
     */
    public List<SimilarConceptType> getSimilarConcept() {
        if (similarConcept == null) {
            similarConcept = new ArrayList<SimilarConceptType>();
        }
        return this.similarConcept;
    }

    /**
     * Reference to a Concept that has its isCharacteristic attribute set to true, and is used for qualifying this data element concept.
     * 
     * @return
     *     possible object is
     *     {@link ConceptReferenceType }
     *     
     */
    public ConceptReferenceType getCharacteristicReference() {
        return characteristicReference;
    }

    /**
     * Sets the value of the characteristicReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConceptReferenceType }
     *     
     */
    public void setCharacteristicReference(ConceptReferenceType value) {
        this.characteristicReference = value;
    }

    /**
     * Reference to a universe associated with this concept.
     * 
     * @return
     *     possible object is
     *     {@link ReferenceType }
     *     
     */
    public ReferenceType getUniverseReference() {
        return universeReference;
    }

    /**
     * Sets the value of the universeReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReferenceType }
     *     
     */
    public void setUniverseReference(ReferenceType value) {
        this.universeReference = value;
    }

}
